OPENDIR(3)                                        Linux Programmer's Manual                                        OPENDIR(3)

NNAAMMEE
       opendir, fdopendir - open a directory

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
       ##iinncclluuddee <<ddiirreenntt..hh>>

       DDIIRR **ooppeennddiirr((ccoonnsstt cchhaarr **_n_a_m_e));;
       DDIIRR **ffddooppeennddiirr((iinntt _f_d));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ffddooppeennddiirr():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _GNU_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The  ooppeennddiirr() function opens a directory stream corresponding to the directory _n_a_m_e, and returns a pointer to the di‐
       rectory stream.  The stream is positioned at the first entry in the directory.

       The ffddooppeennddiirr() function is like ooppeennddiirr(), but returns a directory stream for the directory referred to by  the  open
       file  descriptor  _f_d.  After a successful call to ffddooppeennddiirr(), _f_d is used internally by the implementation, and should
       not otherwise be used by the application.

RREETTUURRNN VVAALLUUEE
       The ooppeennddiirr() and ffddooppeennddiirr() functions return a pointer to the directory stream.  On error, NULL is returned, and _e_r_‐
       _r_n_o is set appropriately.

EERRRROORRSS
       EEAACCCCEESS Permission denied.

       EEBBAADDFF  _f_d is not a valid file descriptor opened for reading.

       EEMMFFIILLEE The per-process limit on the number of open file descriptors has been reached.

       EENNFFIILLEE The system-wide limit on the total number of open files has been reached.

       EENNOOEENNTT Directory does not exist, or _n_a_m_e is an empty string.

       EENNOOMMEEMM Insufficient memory to complete the operation.

       EENNOOTTDDIIRR
              _n_a_m_e is not a directory.

VVEERRSSIIOONNSS
       ffddooppeennddiirr() is available in glibc since version 2.4.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in this section, see aattttrriibbuutteess(7).

       ┌───────────────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee              │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├───────────────────────┼───────────────┼─────────┤
       │ooppeennddiirr(), ffddooppeennddiirr() │ Thread safety │ MT-Safe │
       └───────────────────────┴───────────────┴─────────┘
CCOONNFFOORRMMIINNGG TTOO
       ooppeennddiirr() is present on SVr4, 4.3BSD, and specified in POSIX.1-2001.  ffddooppeennddiirr() is specified in POSIX.1-2008.

NNOOTTEESS
       Filename entries can be read from a directory stream using rreeaaddddiirr(3).

       The underlying file descriptor of the directory stream can be obtained using ddiirrffdd(3).

       The  ooppeennddiirr()  function  sets  the  close-on-exec flag for the file descriptor underlying the _D_I_R _*.  The ffddooppeennddiirr()
       function leaves the setting of the close-on-exec flag unchanged for the file descriptor, _f_d.  POSIX.1-200x  leaves  it
       unspecified whether a successful call to ffddooppeennddiirr() will set the close-on-exec flag for the file descriptor, _f_d.

SSEEEE AALLSSOO
       ooppeenn(2), cclloosseeddiirr(3), ddiirrffdd(3), rreeaaddddiirr(3), rreewwiinnddddiirr(3), ssccaannddiirr(3), sseeeekkddiirr(3), tteellllddiirr(3)

CCOOLLOOPPHHOONN
       This page is part of release 5.10 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the project, information about re‐
       porting bugs, and the latest version of this page, can be found at https://www.kernel.org/doc/man-pages/.

GNU                                                       2017-09-15                                               OPENDIR(3)
